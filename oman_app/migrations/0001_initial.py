# Generated by Django 5.0.1 on 2025-02-15 17:21

import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_admin', models.BooleanField(default=False)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('whatsapp', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('nationality', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='user/images/', verbose_name='user Image')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApplianceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Appliance/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='ApplianceVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Appliance/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='AutoAccessoryPartImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='accessoriesparts/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='AutoAccessoryPartVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='accessoriesparts/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='AutomobileImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='automobile/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='AutomobileVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='automobile/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='BoatImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='boat/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='BoatVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='boat/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='BookImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Book/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='BookVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Book/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='BusinessImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Business/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='BusinessVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Business/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('icon', models.CharField(help_text="Enter the Font Awesome class for the icon, e.g., 'fas fa-tshirt'.", max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ChaletImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Chalet/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='ChaletVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Chalet/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='ComImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Commercial/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='ComputerImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Mobile/computer/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='ComputerVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Computer/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='ComVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Commercial/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='DeviceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Mobile/devices/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='EducationImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Education/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='EducationVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Education/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='FarmImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Farm/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='FarmVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Farm/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='FashionImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Fashion/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='FashionVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Fashion/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='FitnessImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Fitness/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='FitnessVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Fitness/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='FoodImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Food/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='FoodVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Food/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='HeavyVehicleImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='heavyvehicle/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='HeavyVehicleVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='heavyvehicle/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_title', models.CharField(max_length=255, verbose_name='Job Title')),
                ('company_name', models.CharField(max_length=255, verbose_name='Company Name')),
                ('job_type', models.CharField(choices=[('full_time', 'Full-time'), ('part_time', 'Part-time'), ('freelance', 'Freelance'), ('contract', 'Contract'), ('temporary', 'Temporary')], max_length=50, verbose_name='Job Type')),
                ('industry', models.CharField(choices=[('IT', 'IT'), ('marketing', 'Marketing'), ('finance', 'Finance'), ('designing', 'Designing')], max_length=50, verbose_name='Industry')),
                ('experience_level', models.CharField(choices=[('entry', 'Entry-level'), ('mid', 'Mid-level'), ('senior', 'Senior')], max_length=50, verbose_name='Experience Level')),
                ('salary_range', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Salary Range (OMR)')),
                ('education_level', models.CharField(choices=[('diploma', 'Diploma'), ('bachelor', "Bachelor's"), ('postgraduate', 'Post Graduate'), ('phd', 'PHD')], max_length=50, verbose_name='Education Level')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('skills_required', models.TextField(verbose_name='Skills Required')),
                ('description', models.TextField(verbose_name='Property Description')),
            ],
        ),
        migrations.CreateModel(
            name='JobCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('icon', models.CharField(help_text="Enter the Font Awesome class for the icon, e.g., 'fas fa-tshirt'.", max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='JobSeeker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('contact_number', models.CharField(max_length=20, verbose_name='Contact Number')),
                ('email_address', models.EmailField(max_length=254, verbose_name='Email Address')),
                ('address', models.CharField(max_length=255, verbose_name='Current Address')),
                ('summary', models.TextField(verbose_name='Professional Summary')),
                ('job_title', models.CharField(max_length=255, verbose_name='Previous Job Title')),
                ('company_name', models.CharField(max_length=255, verbose_name='Company Name')),
                ('job_location', models.CharField(max_length=255, verbose_name='Company Location')),
                ('start_date', models.DateField(verbose_name='Job Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Job End Date')),
                ('responsibilities', models.TextField(verbose_name='Responsibilities and Achievements')),
                ('degree', models.CharField(max_length=255, verbose_name='Degree')),
                ('institution', models.CharField(max_length=255, verbose_name='Institution Name')),
                ('institution_location', models.URLField(verbose_name='Institution Location')),
                ('start_date_education', models.DateField(verbose_name='Education Start Date')),
                ('end_date_education', models.DateField(verbose_name='Education End Date')),
                ('skills', models.TextField(verbose_name='Skills')),
                ('certification_name', models.CharField(max_length=255, verbose_name='Certification Name')),
                ('issuing_organization', models.CharField(max_length=255, verbose_name='Issuing Organization')),
                ('date_obtained', models.DateField(verbose_name='Certification Date')),
                ('languages', models.CharField(max_length=255, verbose_name='Languages Spoken')),
                ('proficiency_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=50, verbose_name='Language Proficiency')),
                ('project_title', models.CharField(max_length=255, verbose_name='Project Title')),
                ('project_description', models.TextField(verbose_name='Project Description')),
                ('role', models.CharField(max_length=255, verbose_name='Project Role')),
                ('project_duration', models.CharField(max_length=255, verbose_name='Project Duration')),
            ],
        ),
        migrations.CreateModel(
            name='LandImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='land/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='LandVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='land/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='MobileImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Mobile/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='MobileVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Mobile/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='MotorcycleImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Motorcycle/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='MotorcycleVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Motorcycle/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='NumberPlateImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='numberplate/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='NumberPlateVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='numberplate/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='PetImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Pet/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='PetVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Pet/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='Plot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plot_number', models.CharField(max_length=100)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ServiceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Service/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Service/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='SoundVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Mobile/devices/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='ToysImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='Toys/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='ToysVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='Toys/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='VillaImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='villa/images/', verbose_name='Image')),
            ],
        ),
        migrations.CreateModel(
            name='VillaVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video', models.FileField(upload_to='villa/videos/', verbose_name='Video')),
            ],
        ),
        migrations.CreateModel(
            name='Appliance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appliance_type', models.CharField(choices=[('refrigerator', 'Refrigerator'), ('washing_machine', 'Washing Machine'), ('oven', 'Oven'), ('microwave', 'Microwave'), ('clothes_dryer', 'Clothes Dryer'), ('vacuum_cleaner', 'Vacuum Cleaner'), ('air_conditioner', 'Air Conditioner')], max_length=100, verbose_name='Appliance Type')),
                ('product_name', models.TextField(max_length=250)),
                ('image', models.ImageField(upload_to='Home Appliances/', verbose_name='Home Appliance Image')),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('model_number', models.CharField(max_length=100, verbose_name='Model Number')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished')], max_length=11, verbose_name='Condition')),
                ('warranty_status', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=10, verbose_name='Warranty Status')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appliance', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='appliance', to='oman_app.applianceimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='appliance', to='oman_app.appliancevideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='AutoAccessoryPart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Accessory/Part Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.CharField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auto_accessories', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='accessoriesparts', to='oman_app.autoaccessorypartimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='accessoriesparts', to='oman_app.autoaccessorypartvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Automobile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('make', models.CharField(max_length=100, verbose_name='Car Manufacturer')),
                ('year', models.CharField(max_length=100, verbose_name='Year of Manufacture')),
                ('body_type', models.CharField(max_length=100, verbose_name='Car Body Type')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], max_length=50, verbose_name='Fuel Type')),
                ('engine_capacity', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Engine Capacity (cc)')),
                ('transmission', models.CharField(choices=[('automatic', 'Automatic'), ('manual', 'Manual')], max_length=50, verbose_name='Transmission Type')),
                ('exterior_color', models.CharField(max_length=50, verbose_name='Exterior Color')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('description', models.TextField(verbose_name='Description')),
                ('warranty_status', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=10, verbose_name='Warranty Status')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used')], max_length=10, verbose_name='Condition')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='automobile', to='oman_app.automobileimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='automobile', to='oman_app.automobilevideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Boat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('name', models.CharField(max_length=255, verbose_name='Boat Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('manufacturer', models.CharField(max_length=100, verbose_name='Manufacturer')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('year', models.PositiveIntegerField(verbose_name='Year of Manufacture')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('length', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Length (meters)')),
                ('engine_type', models.CharField(choices=[('inboard', 'Inboard'), ('outboard', 'Outboard')], max_length=50, verbose_name='Engine Type')),
                ('engine_power', models.PositiveIntegerField(blank=True, null=True, verbose_name='Engine Power (HP)')),
                ('fuel_type', models.CharField(choices=[('diesel', 'Diesel'), ('petrol', 'Petrol')], max_length=50, verbose_name='Fuel Type')),
                ('price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Price (OMR)')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used')], max_length=10, verbose_name='Condition')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boats', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='boat', to='oman_app.boatimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='boat', to='oman_app.boatvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('fiction', 'Fiction'), ('non_fiction', 'Non-Fiction'), ('children_books', 'Children’s Books'), ('graphic_novels', 'Graphic Novels and Comics'), ('poetry', 'Poetry'), ('textbooks', 'Textbooks and Educational Materials'), ('arts_crafts', 'Arts and Crafts'), ('music', 'Music'), ('photography', 'Photography')], max_length=50, verbose_name='Category')),
                ('book_name', models.TextField(max_length=250)),
                ('genre', models.CharField(max_length=100, verbose_name='Genre (for books)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(verbose_name='Property Description')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used')], max_length=11, verbose_name='Condition')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='book', to='oman_app.bookimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='book', to='oman_app.bookvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('computers', 'Computers and Accessories'), ('furniture', 'Office Furniture'), ('telecommunication', 'Telecommunication Equipment'), ('office_supplies', 'Office Supplies'), ('audio_visual', 'Audio-Visual Equipment'), ('storage_solutions', 'Storage Solutions')], max_length=50, verbose_name='Category')),
                ('product_name', models.TextField(max_length=250)),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished')], max_length=11, verbose_name='Condition')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('warranty_status', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=10, verbose_name='Warranty Status')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='business', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='business', to='oman_app.businessimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='business', to='oman_app.businessvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Chalet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_title', models.CharField(max_length=255, verbose_name='Property Title')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('plot_area', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Plot Area')),
                ('bedrooms', models.IntegerField(verbose_name='Number of Bedrooms')),
                ('bathrooms', models.IntegerField(verbose_name='Number of Bathrooms')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('amenities', models.TextField(verbose_name='Amenities (e.g., Fireplace, Jacuzzi, Sauna)')),
                ('proximity_to_activities', models.TextField(verbose_name='Proximity to Skiing/Outdoor Activities')),
                ('tenancy_information', models.CharField(choices=[('rented', 'Rented'), ('owner_occupied', 'Owner Occupied')], max_length=100, verbose_name='Tenancy Information')),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('contact_details', models.TextField(verbose_name='Contact Details')),
                ('additional_information', models.TextField(verbose_name='Additional Information')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chalet', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='Chalet', to='oman_app.chaletimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='Chalet', to='oman_app.chaletvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_read', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255, unique=True)),
                ('company_type', models.CharField(choices=[('private', 'Private'), ('partnership', 'Partnership'), ('civil_company', 'Civil Company'), ('public', 'Public')], max_length=20)),
                ('city', models.CharField(max_length=100)),
                ('trade_license', models.CharField(max_length=50)),
                ('contact_name', models.CharField(max_length=255)),
                ('linkedin', models.URLField(blank=True, null=True)),
                ('facebook', models.URLField(blank=True, null=True)),
                ('industry', models.CharField(choices=[('agriculture', 'Agriculture'), ('accounting', 'Accounting'), ('it', 'IT'), ('education', 'Education'), ('healthcare', 'Healthcare')], max_length=50)),
                ('company_size', models.PositiveIntegerField()),
                ('phone', models.CharField(max_length=20)),
                ('logo', models.ImageField(upload_to='company_logos/')),
                ('website', models.URLField(blank=True, null=True)),
                ('instagram', models.URLField(blank=True, null=True)),
                ('youtube', models.URLField(blank=True, null=True)),
                ('description', models.TextField()),
                ('email', models.EmailField(max_length=254)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='companies', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Computer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.TextField(max_length=250)),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(verbose_name='Property Description')),
                ('model_number', models.CharField(max_length=100, verbose_name='Model Number')),
                ('operating_system', models.CharField(choices=[('windows', 'Windows'), ('macOS', 'macOS'), ('linux', 'Linux'), ('other', 'Other')], max_length=50, verbose_name='Operating System')),
                ('screen_size', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Screen Size (inches)')),
                ('storage_capacity', models.IntegerField(verbose_name='Storage Capacity (GB)')),
                ('ram_size', models.IntegerField(verbose_name='RAM Size (GB)')),
                ('processor', models.CharField(max_length=100, verbose_name='Processor Type')),
                ('graphics_card', models.CharField(blank=True, max_length=100, null=True, verbose_name='Graphics Card')),
                ('battery_life', models.CharField(blank=True, max_length=50, null=True, verbose_name='Battery Life (hours)')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished')], max_length=11, verbose_name='Condition')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='computer', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='computer', to='oman_app.computerimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='computer', to='oman_app.computervideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Commercial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_title', models.CharField(max_length=255, verbose_name='Property Title')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('location', models.TextField(max_length=250)),
                ('plot_area', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Plot Area (sq ft/m²)')),
                ('amenities', models.TextField(verbose_name='Amenities (e.g., parking, conference rooms)')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('property_type', models.CharField(choices=[('office', 'Office'), ('industrial', 'Industrial'), ('retail', 'Retail'), ('special_purpose', 'Special Purpose')], max_length=100, verbose_name='Property Type')),
                ('ownership_details', models.TextField(verbose_name='Ownership/Agent Details')),
                ('contact_details', models.TextField(verbose_name='Contact Details')),
                ('additional_information', models.TextField(verbose_name='Additional Information')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('images', models.ManyToManyField(blank=True, related_name='Commercial', to='oman_app.comimage', verbose_name='Images')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commercial', to=settings.AUTH_USER_MODEL)),
                ('videos', models.ManyToManyField(blank=True, related_name='Commercial', to='oman_app.comvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_type', models.CharField(choices=[('online', 'Online Learning'), ('in_person', 'In-person'), ('bootcamp', 'Coding Bootcamps')], max_length=50, verbose_name='Course Type')),
                ('subject', models.CharField(max_length=100, verbose_name='Course Subject')),
                ('duration', models.IntegerField(verbose_name='Duration (weeks/months)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(verbose_name='Property Description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Course Fee (OMR)')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('instructor_name', models.CharField(max_length=255, verbose_name='Instructor Name')),
                ('qualification', models.CharField(max_length=255, verbose_name='Instructor Qualification')),
                ('experience', models.TextField(verbose_name='Instructor Experience')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='education', to='oman_app.educationimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='education', to='oman_app.educationvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_title', models.CharField(max_length=255, verbose_name='Property Title')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('plot_area', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Plot Area')),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('irrigation_water_source', models.CharField(choices=[('irrigation', 'Irrigation'), ('natural_water', 'Natural Water Source')], max_length=100, verbose_name='Irrigation/Water Source')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('soil_type', models.CharField(choices=[('sandy', 'Sandy'), ('loamy', 'Loamy'), ('clay', 'Clay')], max_length=100, verbose_name='Soil Type')),
                ('tenancy_information', models.CharField(choices=[('leased', 'Leased'), ('vacant', 'Vacant')], max_length=100, verbose_name='Tenancy Information')),
                ('contact_details', models.TextField(verbose_name='Contact Details')),
                ('additional_information', models.TextField(verbose_name='Additional Information')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='farm', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='Farm', to='oman_app.farmimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='Farm', to='oman_app.farmvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Fashion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.TextField(max_length=250)),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('name', models.TextField(max_length=250)),
                ('category', models.CharField(choices=[('clothing', 'Clothing'), ('footwear', 'Footwear'), ('accessories', 'Accessories')], max_length=50, verbose_name='Category')),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('size', models.CharField(choices=[('S', 'Small'), ('M', 'Medium'), ('L', 'Large'), ('XL', 'XL')], max_length=10, verbose_name='Size')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('unisex', 'Unisex')], max_length=10, verbose_name='Gender')),
                ('color', models.CharField(max_length=50, verbose_name='Color')),
                ('material', models.CharField(max_length=100, verbose_name='Material')),
                ('condition', models.CharField(choices=[('used', 'Used'), ('like_new', 'Like New')], max_length=10, verbose_name='Condition')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('contact_details', models.TextField(verbose_name='Contact Details')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(verbose_name='Property Description')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fashion', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='fashion', to='oman_app.fashionimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='fashion', to='oman_app.fashionvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Fitness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('equipment', 'Equipment'), ('apparel', 'Apparel'), ('team_sports', 'Team Sports'), ('individual_sports', 'Individual Sports'), ('athletics', 'Athletics/Track and Field')], max_length=50, verbose_name='Category')),
                ('product_name', models.TextField(max_length=250)),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used')], max_length=11, verbose_name='Condition')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('warranty_status', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=10, verbose_name='Warranty Status')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fitness', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='fitness', to='oman_app.fitnessimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='fitness', to='oman_app.fitnessvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_type', models.CharField(choices=[('food', 'Food'), ('vitamin', 'Vitamin'), ('herbal', 'Herbal Supplements'), ('protein', 'Protein Supplements'), ('fatty_acids', 'Fatty Acids & Omega-3s')], max_length=50, verbose_name='Product Type')),
                ('product_name', models.TextField(max_length=250)),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Quantity (grams/liters/capsules)')),
                ('expiration_date', models.DateField(verbose_name='Expiration Date')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('dietary_info', models.TextField(verbose_name='Dietary Information (e.g., Gluten-Free, Vegan)')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='food', to='oman_app.foodimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='food', to='oman_app.foodvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='HeavyVehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('name', models.CharField(max_length=255, verbose_name='Vehicle Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('manufacturer', models.CharField(max_length=100, verbose_name='Manufacturer')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('year', models.PositiveIntegerField(verbose_name='Year of Manufacture')),
                ('fuel_type', models.CharField(choices=[('diesel', 'Diesel'), ('petrol', 'Petrol'), ('electric', 'Electric')], max_length=50, verbose_name='Fuel Type')),
                ('engine_capacity', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Engine Capacity (cc)')),
                ('transmission', models.CharField(choices=[('automatic', 'Automatic'), ('manual', 'Manual')], max_length=50, verbose_name='Transmission Type')),
                ('price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Price (OMR)')),
                ('mileage', models.PositiveIntegerField(blank=True, null=True, verbose_name='Mileage (km)')),
                ('load_capacity', models.PositiveIntegerField(blank=True, null=True, verbose_name='Load Capacity (tons)')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used')], max_length=10, verbose_name='Condition')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='heavy_vehicles', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='heavyvehicle', to='oman_app.heavyvehicleimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='heavyvehicle', to='oman_app.heavyvehiclevideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='JobPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Job Title (e.g., Software Developer)', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the role, responsibilities, and expectations.')),
                ('job_type', models.CharField(choices=[('full-time', 'Full-time'), ('part-time', 'Part-time'), ('contract', 'Contract'), ('temporary', 'Temporary'), ('freelance', 'Freelance'), ('internship', 'Internship')], default='full-time', max_length=50)),
                ('salary_range', models.CharField(blank=True, max_length=100, null=True)),
                ('work_location', models.CharField(max_length=255)),
                ('number_of_vacancies', models.PositiveIntegerField(default=1)),
                ('contact_email', models.EmailField(max_length=254)),
                ('qualifications', models.TextField()),
                ('skills_required', models.TextField()),
                ('experience_required', models.CharField(max_length=100)),
                ('application_deadline', models.DateField()),
                ('working_hours', models.CharField(blank=True, max_length=100, null=True)),
                ('posted_on', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='oman_app.company')),
                ('job_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_posts', to='oman_app.jobcategory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('name', models.CharField(max_length=100, verbose_name='Full Name')),
                ('email', models.EmailField(max_length=254, verbose_name='Email Address')),
                ('phone', models.CharField(max_length=15, verbose_name='Phone Number')),
                ('resume', models.FileField(upload_to='resumes/', verbose_name='Upload Resume')),
                ('applied_on', models.DateTimeField(auto_now_add=True, verbose_name='Applied On')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='oman_app.company')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_applications', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='oman_app.jobpost', verbose_name='Job')),
            ],
        ),
        migrations.CreateModel(
            name='Land',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_title', models.CharField(max_length=255, verbose_name='Property Title')),
                ('image', models.ImageField(upload_to='land/', verbose_name='Main Image')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('plot_area', models.CharField(max_length=100, verbose_name='Plot Area')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('property_type', models.CharField(choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('agricultural', 'Agricultural'), ('industrial', 'Industrial')], max_length=100, verbose_name='Property Type')),
                ('ownership_details', models.TextField(verbose_name='Ownership/Agent Details')),
                ('contact_details', models.TextField(verbose_name='Contact Details')),
                ('additional_information', models.TextField(verbose_name='Additional Information')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lands', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='land', to='oman_app.landimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='land', to='oman_app.landvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Mobile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.TextField(max_length=250)),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('model_number', models.CharField(max_length=100, verbose_name='Model Number')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('operating_system', models.CharField(choices=[('android', 'Android'), ('iOS', 'iOS'), ('windows', 'Windows'), ('other', 'Other')], max_length=50, verbose_name='Operating System')),
                ('screen_size', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Screen Size (inches)')),
                ('storage_capacity', models.IntegerField(verbose_name='Storage Capacity (GB)')),
                ('ram_size', models.IntegerField(verbose_name='RAM Size (GB)')),
                ('battery_capacity', models.IntegerField(blank=True, null=True, verbose_name='Battery Capacity (mAh)')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished')], max_length=11, verbose_name='Condition')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mobile', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='mobile', to='oman_app.mobileimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='mobile', to='oman_app.mobilevideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Motorcycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('make', models.CharField(max_length=100, verbose_name='Manufacturer')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('model', models.CharField(max_length=100, verbose_name='Model')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('year', models.CharField(max_length=100, verbose_name='Year of Manufacture')),
                ('description', models.TextField(verbose_name='Description')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('body_type', models.CharField(max_length=100, verbose_name='Motorcycle Type')),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('engine_capacity', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Engine Capacity (cc)')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used')], max_length=10, verbose_name='Condition')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='motorcycles', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='motorcycle', to='oman_app.motorcycleimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='motorcycle', to='oman_app.motorcyclevideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='NumberPlate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('number', models.CharField(max_length=50, verbose_name='Plate Number')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(verbose_name='Description')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='number_plates', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='numberplate', to='oman_app.numberplateimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='numberplate', to='oman_app.numberplatevideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pet_type', models.CharField(choices=[('dog', 'Dog'), ('cat', 'Cat'), ('fish', 'Fish'), ('rabbit', 'Rabbit'), ('hamster', 'Hamster'), ('hedgehog', 'Hedgehog'), ('bird', 'Lovebird'), ('tortoise', 'Tortoise')], max_length=50, verbose_name='Pet Type')),
                ('pet_name', models.TextField(max_length=250)),
                ('breed', models.CharField(max_length=100, verbose_name='Breed')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('age', models.IntegerField(verbose_name='Age (months/years)')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('vaccinated', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=3, verbose_name='Vaccination Status')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pet', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='pet', to='oman_app.petimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='pet', to='oman_app.petvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='oman_app.region')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_type', models.CharField(choices=[('cleaning', 'Cleaning'), ('maintenance', 'Maintenance'), ('consulting', 'Consulting'), ('legal', 'Legal Services'), ('human_resources', 'Human Resources Services'), ('medical', 'Medical Services'), ('fitness', 'Fitness Services')], max_length=50, verbose_name='Service Type')),
                ('provider_name', models.CharField(max_length=255, verbose_name='Service Provider Name')),
                ('price_range', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price Range (OMR)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(verbose_name='Property Description')),
                ('contact_info', models.TextField(verbose_name='Contact Information')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='service', to='oman_app.serviceimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='service', to='oman_app.servicevideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Sound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.TextField(max_length=250)),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('model_number', models.CharField(max_length=100, verbose_name='Model Number')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(verbose_name='Property Description')),
                ('connectivity', models.CharField(choices=[('bluetooth', 'Bluetooth'), ('wifi', 'Wi-Fi'), ('aux', 'AUX'), ('usb', 'USB'), ('other', 'Other')], max_length=50, verbose_name='Connectivity')),
                ('output_power', models.CharField(max_length=50, verbose_name='Output Power (e.g., 20W)')),
                ('channels', models.CharField(blank=True, max_length=50, null=True, verbose_name='Audio Channels (e.g., 2.1, 5.1)')),
                ('has_smart_assistant', models.BooleanField(default=False, verbose_name='Smart Assistant Support')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished')], max_length=11, verbose_name='Condition')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('images', models.ManyToManyField(blank=True, related_name='sound', to='oman_app.deviceimage', verbose_name='Images')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sound', to=settings.AUTH_USER_MODEL)),
                ('videos', models.ManyToManyField(blank=True, related_name='sound', to='oman_app.soundvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='oman_app.category')),
            ],
        ),
        migrations.CreateModel(
            name='Toys',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=250)),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(verbose_name='Property Description')),
                ('category', models.CharField(choices=[('video_games', 'Video Games'), ('consoles', 'Consoles'), ('toys', 'Toys')], max_length=50, verbose_name='Category')),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('platform', models.CharField(choices=[('ps5', 'PS5'), ('xbox', 'Xbox'), ('pc', 'PC')], max_length=20, verbose_name='Gaming Platform')),
                ('age_group', models.CharField(choices=[('3-5_years', '3-5 years'), ('6-10_years', '6-10 years'), ('11-16_years', '11-16 years'), ('above_16_years', 'Above 16 years')], max_length=20, verbose_name='Age Group')),
                ('condition', models.CharField(choices=[('new', 'New'), ('used', 'Used'), ('refurbished', 'Refurbished')], max_length=11, verbose_name='Condition')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='toys', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='toys', to='oman_app.toysimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='toys', to='oman_app.toysvideo', verbose_name='Videos')),
            ],
        ),
        migrations.CreateModel(
            name='Villa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_title', models.CharField(max_length=255, verbose_name='Property Title')),
                ('image', models.ImageField(upload_to='villa/', verbose_name='Main Image')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price (OMR)')),
                ('regions', models.CharField(choices=[('MS', 'Muscat'), ('DH', 'Dhofar'), ('BT', 'Batinah'), ('DA', 'Dakhiliyah'), ('SH', 'Sharqiyah'), ('BR', 'Buraimi'), ('ZU', 'Zufar'), ('MW', 'Musandam'), ('WR', 'Wusta')], default='MS', max_length=250)),
                ('cities', models.TextField(max_length=250)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('location', models.TextField(max_length=250)),
                ('plot_area', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Plot Area')),
                ('bathrooms', models.IntegerField(null=True, verbose_name='Number of Bathrooms')),
                ('bedrooms', models.IntegerField(verbose_name='Number of Bedrooms')),
                ('description', models.TextField(verbose_name='Property Description')),
                ('property_type', models.CharField(choices=[('luxury', 'Luxury'), ('residential', 'Residential')], max_length=100, verbose_name='Property Type')),
                ('ownership_details', models.TextField(verbose_name='Ownership/Agent Details')),
                ('contact_details', models.TextField(verbose_name='Contact Details')),
                ('additional_information', models.TextField(verbose_name='Additional Information')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('soldout', 'Soldout')], default='pending', max_length=20, verbose_name='Approval Status')),
                ('listing_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent')], default='sell', max_length=10, verbose_name='Listing Type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='villas', to=settings.AUTH_USER_MODEL)),
                ('images', models.ManyToManyField(blank=True, related_name='villa', to='oman_app.villaimage', verbose_name='Images')),
                ('videos', models.ManyToManyField(blank=True, related_name='villa', to='oman_app.villavideo', verbose_name='Videos')),
            ],
        ),
    ]
